import React, { useState, useEffect } from 'react';
import { 
  TrendingUp, 
  BarChart3, 
  Target, 
  Award,
  Calendar,
  Zap,
  Brain,
  MessageSquare,
  Lightbulb,
  Download,
  RefreshCw
} from 'lucide-react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { AnalyticsInsights } from './AnalyticsInsights';
import { feedbackService, UserProgress, FeedbackAnalytics } from '../../services/feedbackService';
import { analyticsService } from '../../services/analyticsService';
import { useAuth } from '../../contexts/AuthContext';

interface PerformanceStats {
  totalSessions: number;
  averageScore: number;
  recentScore: number;
  improvementTrend: number;
  skillBreakdown: Record<string, number>;
}

export function PerformanceAnalytics() {
  const { user } = useAuth();
  const [stats, setStats] = useState<PerformanceStats | null>(null);
  const [progress, setProgress] = useState<UserProgress[]>([]);
  const [analytics, setAnalytics] = useState<FeedbackAnalytics[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [timeRange, setTimeRange] = useState<'7d' | '30d' | '90d' | 'all'>('30d');
  const [activeView, setActiveView] = useState<'overview' | 'insights'>('overview');

  useEffect(() => {
    if (user) {
      loadAnalyticsData();
    }
  }, [user, timeRange]);

  const loadAnalyticsData = async () => {
    try {
      setLoading(true);
      const [statsData, progressData, analyticsData] = await Promise.all([
        feedbackService.getPerformanceStats(user!.id),
        feedbackService.getUserProgress(user!.id),
        feedbackService.getUserAnalytics(user!.id)
      ]);

      setStats(statsData);
      setProgress(progressData);
      setAnalytics(analyticsData);
    } catch (error) {
      console.error('Error loading analytics data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    setRefreshing(true);
    await loadAnalyticsData();
    setRefreshing(false);
  };

  const handleExportReport = async () => {
    try {
      const report = await analyticsService.generatePerformanceReport(user!.id);
      const reportContent = `
PREPAI PERFORMANCE ANALYTICS REPORT
===================================

SUMMARY:
- Total Sessions: ${report.summary.totalSessions}
- Average Score: ${report.summary.averageScore}%
- Improvement Rate: ${report.summary.improvementRate}%
- Strongest Skill: ${report.summary.strongestSkill}
- Weakest Skill: ${report.summary.weakestSkill}

INSIGHTS:
${report.insights.map(insight => `
- ${insight.title}
  Type: ${insight.type}
  Priority: ${insight.priority}
  Description: ${insight.description}
`).join('\n')}

PERFORMANCE TRENDS:
${report.trends.map(trend => `
- ${trend.skillArea}: ${trend.trend} (${trend.changeRate.toFixed(1)}% change rate)
`).join('\n')}

${report.prediction ? `
PREDICTIONS:
- Predicted Next Score: ${report.prediction.predictedNextScore}%
- Confidence Level: ${report.prediction.confidenceLevel}%
- Estimated Improvement Time: ${report.prediction.estimatedImprovementDays} days
- Focus Areas: ${report.prediction.recommendedFocusAreas.join(', ')}
` : ''}

Generated by PrepAI Analytics
Report Date: ${new Date().toLocaleDateString()}
      `.trim();

      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `prepai-analytics-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error generating report:', error);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 80) return 'text-blue-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBackground = (score: number) => {
    if (score >= 90) return 'bg-green-50 border-green-200';
    if (score >= 80) return 'bg-blue-50 border-blue-200';
    if (score >= 70) return 'bg-yellow-50 border-yellow-200';
    return 'bg-red-50 border-red-200';
  };

  const getTrendIcon = (trend: number) => {
    if (trend > 0) return <TrendingUp className="h-4 w-4 text-green-600" />;
    if (trend < 0) return <TrendingUp className="h-4 w-4 text-red-600 transform rotate-180" />;
    return <TrendingUp className="h-4 w-4 text-gray-400" />;
  };

  const getSkillIcon = (skill: string) => {
    switch (skill) {
      case 'communication': return <MessageSquare className="h-5 w-5" />;
      case 'technical': return <Brain className="h-5 w-5" />;
      case 'problem_solving': return <Target className="h-5 w-5" />;
      case 'confidence': return <Award className="h-5 w-5" />;
      default: return <BarChart3 className="h-5 w-5" />;
    }
  };

  const getSkillLabel = (skill: string) => {
    switch (skill) {
      case 'communication': return 'Communication';
      case 'technical': return 'Technical Skills';
      case 'problem_solving': return 'Problem Solving';
      case 'confidence': return 'Confidence';
      default: return skill;
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (!stats) {
    return (
      <Card className="text-center py-12">
        <BarChart3 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-900 mb-2">No Analytics Data</h3>
        <p className="text-gray-600">Complete some interviews to see your performance analytics</p>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Performance Analytics</h2>
          <p className="text-gray-600">Track your progress and identify areas for improvement</p>
        </div>
        <div className="flex items-center space-x-3">
          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value as any)}
            className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="7d">Last 7 days</option>
            <option value="30d">Last 30 days</option>
            <option value="90d">Last 90 days</option>
            <option value="all">All time</option>
          </select>
          <Button
            onClick={handleRefresh}
            variant="outline"
            size="sm"
            disabled={refreshing}
            className="flex items-center space-x-2"
          >
            <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
            <span>Refresh</span>
          </Button>
          <Button
            onClick={handleExportReport}
            variant="outline"
            size="sm"
            className="flex items-center space-x-2"
          >
            <Download className="h-4 w-4" />
            <span>Export Report</span>
          </Button>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8">
          {[
            { id: 'overview', label: 'Performance Overview', icon: <BarChart3 className="h-4 w-4" /> },
            { id: 'insights', label: 'AI Insights', icon: <Brain className="h-4 w-4" /> }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveView(tab.id as any)}
              className={`flex items-center space-x-2 px-4 py-2 border-b-2 font-medium text-sm transition-colors ${
                activeView === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              {tab.icon}
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      {activeView === 'overview' ? (
        <>
          {/* Key Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card className={`border-2 ${getScoreBackground(stats.averageScore)}`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Average Score</p>
                  <p className={`text-3xl font-bold ${getScoreColor(stats.averageScore)}`}>
                    {stats.averageScore}%
                  </p>
                </div>
                <div className="p-3 bg-white rounded-lg">
                  <BarChart3 className={`h-6 w-6 ${getScoreColor(stats.averageScore)}`} />
                </div>
              </div>
            </Card>

            <Card>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Sessions</p>
                  <p className="text-3xl font-bold text-gray-900">{stats.totalSessions}</p>
                </div>
                <div className="p-3 bg-blue-100 rounded-lg">
                  <Calendar className="h-6 w-6 text-blue-600" />
                </div>
              </div>
            </Card>

            <Card>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Recent Score</p>
                  <p className={`text-3xl font-bold ${getScoreColor(stats.recentScore)}`}>
                    {stats.recentScore}%
                  </p>
                </div>
                <div className="p-3 bg-purple-100 rounded-lg">
                  <Target className="h-6 w-6 text-purple-600" />
                </div>
              </div>
            </Card>

            <Card>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Improvement</p>
                  <div className="flex items-center space-x-1">
                    <p className={`text-3xl font-bold ${stats.improvementTrend >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {stats.improvementTrend > 0 ? '+' : ''}{stats.improvementTrend}%
                    </p>
                    {getTrendIcon(stats.improvementTrend)}
                  </div>
                </div>
                <div className="p-3 bg-emerald-100 rounded-lg">
                  <TrendingUp className="h-6 w-6 text-emerald-600" />
                </div>
              </div>
            </Card>
          </div>

          {/* Skill Breakdown */}
          <Card>
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Skill Breakdown</h3>
              <p className="text-gray-600">Your performance across different skill areas</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {Object.entries(stats.skillBreakdown).map(([skill, score]) => {
                const progressData = progress.find(p => p.skillArea === skill);
                const improvement = progressData ? progressData.improvementRate : 0;

                return (
                  <div key={skill} className="space-y-3">
                    <div className="flex items-center space-x-3">
                      <div className={`p-2 rounded-lg ${getScoreBackground(score)}`}>
                        {getSkillIcon(skill)}
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900">{getSkillLabel(skill)}</h4>
                        <div className="flex items-center space-x-2">
                          <span className={`text-lg font-bold ${getScoreColor(score)}`}>
                            {score}%
                          </span>
                          {improvement !== 0 && (
                            <span className={`text-sm ${improvement > 0 ? 'text-green-600' : 'text-red-600'}`}>
                              {improvement > 0 ? '+' : ''}{improvement.toFixed(1)}%
                            </span>
                          )}
                        </div>
                      </div>
                    </div>

                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full transition-all duration-500 ${
                          score >= 90 ? 'bg-green-500' :
                          score >= 80 ? 'bg-blue-500' :
                          score >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                        }`}
                        style={{ width: `${score}%` }}
                      />
                    </div>

                    <div className="text-xs text-gray-600">
                      {progressData && (
                        <span>{progressData.sessionsCount} sessions completed</span>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </Card>

          {/* Progress Trends */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Progress Over Time</h3>
                <p className="text-gray-600">Your improvement trajectory</p>
              </div>

              <div className="space-y-4">
                {progress.filter(p => p.skillArea !== 'overall').map((item) => (
                  <div key={item.skillArea} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="p-2 bg-white rounded-lg">
                        {getSkillIcon(item.skillArea)}
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-900">{getSkillLabel(item.skillArea)}</h4>
                        <p className="text-sm text-gray-600">{item.sessionsCount} sessions</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className={`text-lg font-bold ${getScoreColor(item.currentScore)}`}>
                        {item.currentScore}%
                      </div>
                      {item.previousScore && (
                        <div className={`text-sm ${item.improvementRate >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {item.improvementRate >= 0 ? '+' : ''}{item.improvementRate.toFixed(1)}%
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </Card>

            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Quick Recommendations</h3>
                <p className="text-gray-600">Based on your recent performance</p>
              </div>

              <div className="space-y-4">
                {Object.entries(stats.skillBreakdown)
                  .sort(([,a], [,b]) => a - b)
                  .slice(0, 2)
                  .map(([skill, score]) => (
                    <div key={skill} className="flex items-start space-x-3 p-4 bg-blue-50 rounded-lg">
                      <div className="p-2 bg-blue-100 rounded-lg">
                        <Lightbulb className="h-4 w-4 text-blue-600" />
                      </div>
                      <div>
                        <h4 className="font-medium text-blue-900">Focus on {getSkillLabel(skill)}</h4>
                        <p className="text-sm text-blue-700">
                          Current score: {score}%. Consider targeted practice to improve this area.
                        </p>
                      </div>
                    </div>
                  ))}

                {stats.improvementTrend > 5 && (
                  <div className="flex items-start space-x-3 p-4 bg-green-50 rounded-lg">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <Award className="h-4 w-4 text-green-600" />
                    </div>
                    <div>
                      <h4 className="font-medium text-green-900">Great Progress!</h4>
                      <p className="text-sm text-green-700">
                        You're improving rapidly. Keep up the excellent work!
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </Card>
          </div>

          {/* Performance Consistency */}
          {analytics.length > 0 && (
            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Performance Consistency</h3>
                <p className="text-gray-600">How consistent your performance has been over time</p>
              </div>

              <div className="flex items-center justify-between p-6 bg-gray-50 rounded-lg">
                <div>
                  <h4 className="font-medium text-gray-900 mb-1">Consistency Score</h4>
                  <p className="text-sm text-gray-600">Higher scores indicate more consistent performance</p>
                </div>
                <div className="text-right">
                  <div className={`text-3xl font-bold ${getScoreColor(analytics[0].consistencyScore)}`}>
                    {analytics[0].consistencyScore}%
                  </div>
                  <div className="text-sm text-gray-600">
                    Improvement velocity: {analytics[0].improvementVelocity.toFixed(1)}%
                  </div>
                </div>
              </div>
            </Card>
          )}
        </>
      ) : (
        <AnalyticsInsights />
      )}
    </div>
  );
}