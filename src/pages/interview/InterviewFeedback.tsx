import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { 
  Award, 
  TrendingUp, 
  Target, 
  MessageSquare,
  BarChart3,
  CheckCircle,
  AlertCircle,
  ArrowRight,
  Download,
  RotateCcw,
  Share2,
  Calendar,
  Clock,
  User,
  Brain
} from 'lucide-react';
import { Button } from '../../components/ui/Button';
import { Card } from '../../components/ui/Card';
import { LoadingSpinner } from '../../components/ui/LoadingSpinner';
import { feedbackService, InterviewFeedback, InterviewSession } from '../../services/feedbackService';
import { useAuth } from '../../contexts/AuthContext';

export function InterviewFeedbackPage() {
  const { sessionId } = useParams<{ sessionId: string }>();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [feedback, setFeedback] = useState<InterviewFeedback | null>(null);
  const [session, setSession] = useState<InterviewSession | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (sessionId && user) {
      loadFeedbackData();
    }
  }, [sessionId, user]);

  const loadFeedbackData = async () => {
    try {
      setLoading(true);
      setError(null);

      const [feedbackData, sessionsData] = await Promise.all([
        feedbackService.getFeedbackBySessionId(sessionId!),
        feedbackService.getUserSessions(user!.id)
      ]);

      if (!feedbackData) {
        setError('Feedback not found for this session');
        return;
      }

      const sessionData = sessionsData.find(s => s.id === sessionId);
      if (!sessionData) {
        setError('Session not found');
        return;
      }

      setFeedback(feedbackData);
      setSession(sessionData);
    } catch (error) {
      console.error('Error loading feedback:', error);
      setError('Failed to load feedback data');
    } finally {
      setLoading(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 80) return 'text-blue-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBgColor = (score: number) => {
    if (score >= 90) return 'bg-green-100 border-green-200';
    if (score >= 80) return 'bg-blue-100 border-blue-200';
    if (score >= 70) return 'bg-yellow-100 border-yellow-200';
    return 'bg-red-100 border-red-200';
  };

  const getPerformanceLevel = (score: number) => {
    if (score >= 90) return 'Excellent';
    if (score >= 80) return 'Good';
    if (score >= 70) return 'Average';
    return 'Needs Improvement';
  };

  const handleDownloadReport = async () => {
    if (!feedback || !session) return;

    const reportContent = `
PREPAI INTERVIEW FEEDBACK REPORT
================================

Interview Details:
- Date: ${new Date(feedback.createdAt).toLocaleDateString()}
- Role: ${session.role}
- Type: ${session.sessionType}
- Duration: ${session.durationMinutes} minutes
- Difficulty: ${session.difficulty}
- Industry: ${session.industry}

Overall Performance: ${feedback.overallScore}/100 (${getPerformanceLevel(feedback.overallScore)})

DETAILED SCORES:
- Communication: ${feedback.communicationScore}/100
- Technical Skills: ${feedback.technicalScore}/100
- Problem Solving: ${feedback.problemSolvingScore}/100
- Confidence: ${feedback.confidenceScore}/100

STRENGTHS:
${feedback.strengths.map(s => `â€¢ ${s}`).join('\n')}

AREAS FOR IMPROVEMENT:
${feedback.improvements.map(i => `â€¢ ${i}`).join('\n')}

RECOMMENDATIONS:
${feedback.recommendations.map(r => `â€¢ ${r}`).join('\n')}

DETAILED FEEDBACK:
${feedback.detailedFeedback}

Generated by PrepAI - AI-Powered Interview Preparation
Report generated on: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `prepai-feedback-${session.role.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    if (!feedback || !session) return;

    const shareText = `I just completed an interview practice session on PrepAI! ðŸŽ¯\n\nRole: ${session.role}\nOverall Score: ${feedback.overallScore}%\nPerformance: ${getPerformanceLevel(feedback.overallScore)}\n\nPractice makes perfect! ðŸ’ª`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'PrepAI Interview Results',
          text: shareText,
          url: window.location.href
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      // Fallback: copy to clipboard
      try {
        await navigator.clipboard.writeText(shareText);
        alert('Results copied to clipboard!');
      } catch (error) {
        console.log('Error copying to clipboard:', error);
      }
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (error || !feedback || !session) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="max-w-md w-full text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-gray-900 mb-2">Feedback Not Found</h2>
          <p className="text-gray-600 mb-6">{error || 'The feedback for this session could not be found.'}</p>
          <div className="space-y-3">
            <Link to="/dashboard">
              <Button className="w-full">Back to Dashboard</Button>
            </Link>
            <Link to="/interview/setup">
              <Button variant="outline" className="w-full">Start New Interview</Button>
            </Link>
          </div>
        </Card>
      </div>
    );
  }

  const duration = session.completedAt && session.startedAt
    ? Math.floor((new Date(session.completedAt).getTime() - new Date(session.startedAt).getTime()) / (1000 * 60))
    : session.durationMinutes;

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className={`inline-flex items-center justify-center w-20 h-20 rounded-full border-4 mb-4 ${getScoreBgColor(feedback.overallScore)}`}>
            <Award className={`h-10 w-10 ${getScoreColor(feedback.overallScore)}`} />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Interview Feedback</h1>
          <p className="text-xl text-gray-600">
            {session.role} â€¢ {session.sessionType} Interview
          </p>
          <div className="flex items-center justify-center space-x-4 mt-2 text-sm text-gray-500">
            <div className="flex items-center space-x-1">
              <Calendar className="h-4 w-4" />
              <span>{new Date(feedback.createdAt).toLocaleDateString()}</span>
            </div>
            <span>â€¢</span>
            <div className="flex items-center space-x-1">
              <Clock className="h-4 w-4" />
              <span>{duration} minutes</span>
            </div>
            <span>â€¢</span>
            <span className="capitalize">{session.difficulty} difficulty</span>
          </div>
        </div>

        {/* Overall Score */}
        <Card className="mb-8 text-center">
          <div className="mb-6">
            <div className={`text-6xl font-bold mb-2 ${getScoreColor(feedback.overallScore)}`}>
              {feedback.overallScore}%
            </div>
            <div className="text-2xl font-semibold text-gray-900 mb-2">
              {getPerformanceLevel(feedback.overallScore)}
            </div>
            <div className="text-gray-600">Overall Interview Performance</div>
          </div>
          
          <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-4">
            <Button onClick={handleDownloadReport} variant="outline" className="flex items-center space-x-2">
              <Download className="h-4 w-4" />
              <span>Download Report</span>
            </Button>
            <Button onClick={handleShare} variant="outline" className="flex items-center space-x-2">
              <Share2 className="h-4 w-4" />
              <span>Share Results</span>
            </Button>
            <Link to="/interview/setup">
              <Button className="flex items-center space-x-2">
                <RotateCcw className="h-4 w-4" />
                <span>Practice Again</span>
              </Button>
            </Link>
          </div>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            
            {/* Score Breakdown */}
            <Card>
              <div className="flex items-center mb-6">
                <div className="bg-blue-100 p-3 rounded-lg mr-4">
                  <BarChart3 className="h-6 w-6 text-blue-600" />
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">Performance Breakdown</h3>
                  <p className="text-gray-600">Detailed scores by competency area</p>
                </div>
              </div>

              <div className="space-y-6">
                {[
                  { label: 'Communication', score: feedback.communicationScore, icon: <MessageSquare className="w-5 h-5" />, description: 'Clarity, structure, and articulation' },
                  { label: 'Technical Skills', score: feedback.technicalScore, icon: <Brain className="w-5 h-5" />, description: 'Domain knowledge and expertise' },
                  { label: 'Problem Solving', score: feedback.problemSolvingScore, icon: <Target className="w-5 h-5" />, description: 'Analytical thinking and approach' },
                  { label: 'Confidence', score: feedback.confidenceScore, icon: <Award className="w-5 h-5" />, description: 'Poise and self-assurance' },
                ].map((item, index) => (
                  <div key={index} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="p-2 bg-gray-50 rounded-lg text-gray-600">
                          {item.icon}
                        </div>
                        <div>
                          <span className="font-medium text-gray-900">{item.label}</span>
                          <p className="text-sm text-gray-600">{item.description}</p>
                        </div>
                      </div>
                      <span className={`text-xl font-bold ${getScoreColor(item.score)}`}>
                        {item.score}%
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full transition-all duration-500 ${
                          item.score >= 90 ? 'bg-green-500' :
                          item.score >= 80 ? 'bg-blue-500' :
                          item.score >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                        }`}
                        style={{ width: `${item.score}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
            </Card>

            {/* Detailed Feedback */}
            <Card>
              <div className="flex items-center mb-6">
                <div className="bg-purple-100 p-3 rounded-lg mr-4">
                  <MessageSquare className="h-6 w-6 text-purple-600" />
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">AI Analysis</h3>
                  <p className="text-gray-600">Comprehensive feedback on your performance</p>
                </div>
              </div>

              <div className="prose prose-sm max-w-none">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {feedback.detailedFeedback}
                </p>
              </div>
            </Card>

            {/* Strengths and Improvements */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <h3 className="font-semibold text-green-700 mb-4 flex items-center">
                  <CheckCircle className="w-5 h-5 mr-2" />
                  Strengths
                </h3>
                <ul className="space-y-3">
                  {feedback.strengths.map((strength, index) => (
                    <li key={index} className="flex items-start">
                      <div className="w-2 h-2 bg-green-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                      <span className="text-gray-700">{strength}</span>
                    </li>
                  ))}
                </ul>
              </Card>

              <Card>
                <h3 className="font-semibold text-yellow-700 mb-4 flex items-center">
                  <TrendingUp className="w-5 h-5 mr-2" />
                  Areas for Improvement
                </h3>
                <ul className="space-y-3">
                  {feedback.improvements.map((improvement, index) => (
                    <li key={index} className="flex items-start">
                      <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                      <span className="text-gray-700">{improvement}</span>
                    </li>
                  ))}
                </ul>
              </Card>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Session Details */}
            <Card>
              <h3 className="font-semibold text-gray-900 mb-4">Session Details</h3>
              
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Role:</span>
                  <span className="font-medium text-gray-900">{session.role}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Experience Level:</span>
                  <span className="font-medium text-gray-900 capitalize">{session.experienceLevel}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Interview Type:</span>
                  <span className="font-medium text-gray-900 capitalize">{session.sessionType}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Difficulty:</span>
                  <span className="font-medium text-gray-900 capitalize">{session.difficulty}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Industry:</span>
                  <span className="font-medium text-gray-900">{session.industry}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Duration:</span>
                  <span className="font-medium text-gray-900">{duration} minutes</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Status:</span>
                  <span className="font-medium text-green-600 capitalize">{session.status}</span>
                </div>
              </div>
            </Card>

            {/* Recommendations */}
            <Card>
              <h3 className="font-semibold text-gray-900 mb-4">Recommendations</h3>
              
              <div className="space-y-4">
                {feedback.recommendations.map((rec, index) => (
                  <div key={index} className="border-l-4 border-blue-400 pl-4">
                    <p className="text-sm text-gray-700">{rec}</p>
                  </div>
                ))}
              </div>
            </Card>

            {/* Next Steps */}
            <Card>
              <h3 className="font-semibold text-gray-900 mb-4">Next Steps</h3>
              
              <div className="space-y-3">
                <Link to="/interview/setup" className="block">
                  <Button className="w-full flex items-center justify-center space-x-2">
                    <RotateCcw className="h-4 w-4" />
                    <span>Practice Again</span>
                  </Button>
                </Link>
                
                <Link to="/dashboard" className="block">
                  <Button variant="outline" className="w-full flex items-center justify-center space-x-2">
                    <TrendingUp className="h-4 w-4" />
                    <span>View Progress</span>
                  </Button>
                </Link>

                <Link to={`/interview/analytics/${sessionId}`} className="block">
                  <Button variant="ghost" className="w-full flex items-center justify-center space-x-2">
                    <BarChart3 className="h-4 w-4" />
                    <span>Detailed Analytics</span>
                  </Button>
                </Link>
              </div>
            </Card>

            {/* Performance Tip */}
            <Card className="bg-blue-50 border-blue-200">
              <div className="flex items-start space-x-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Brain className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <h4 className="font-medium text-blue-900 mb-1">Pro Tip</h4>
                  <p className="text-sm text-blue-700">
                    Regular practice is key to improvement. Try to complete at least one interview session per week to maintain and enhance your skills.
                  </p>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}