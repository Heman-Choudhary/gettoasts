import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { 
  Award, 
  TrendingUp, 
  Target, 
  MessageSquare,
  BarChart3,
  CheckCircle,
  AlertCircle,
  ArrowRight,
  Download,
  RotateCcw
} from 'lucide-react';
import { Button } from '../../components/ui/Button';
import { Card } from '../../components/ui/Card';

interface FeedbackData {
  overallScore: number;
  breakdown: {
    technical: number;
    communication: number;
    problemSolving: number;
    cultural: number;
  };
  feedback: string;
  recommendations: string[];
}

interface Message {
  id: string;
  type: 'ai' | 'user';
  content: string;
  timestamp: Date;
}

export function InterviewResults() {
  const navigate = useNavigate();
  const [feedback, setFeedback] = useState<FeedbackData | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);

  useEffect(() => {
    // Load feedback from sessionStorage
    const savedFeedback = sessionStorage.getItem('interviewFeedback');
    const savedMessages = sessionStorage.getItem('interviewMessages');
    
    if (savedFeedback) {
      setFeedback(JSON.parse(savedFeedback));
    }
    
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    }

    if (!savedFeedback) {
      navigate('/dashboard');
    }
  }, [navigate]);

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBgColor = (score: number) => {
    if (score >= 80) return 'bg-green-100';
    if (score >= 60) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  const getPerformanceLevel = (score: number) => {
    if (score >= 80) return 'Excellent';
    if (score >= 60) return 'Good';
    if (score >= 40) return 'Fair';
    return 'Needs Improvement';
  };

  const downloadReport = () => {
    if (!feedback) return;

    const reportContent = `
PREPAI INTERVIEW PERFORMANCE REPORT
===================================

Overall Score: ${feedback.overallScore}/100
Performance Level: ${getPerformanceLevel(feedback.overallScore)}

DETAILED BREAKDOWN:
- Technical Skills: ${feedback.breakdown.technical}/100
- Communication: ${feedback.breakdown.communication}/100
- Problem Solving: ${feedback.breakdown.problemSolving}/100
- Cultural Fit: ${feedback.breakdown.cultural}/100

FEEDBACK:
${feedback.feedback}

RECOMMENDATIONS:
${feedback.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

Generated by PrepAI - AI-Powered Interview Preparation
Date: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `prepai-interview-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!feedback) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">No Results Found</h2>
          <p className="text-gray-600 mb-6">It looks like you haven't completed an interview yet.</p>
          <Link to="/interview/setup">
            <Button>Start New Interview</Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className={`inline-flex items-center justify-center w-20 h-20 rounded-full ${getScoreBgColor(feedback.overallScore)} mb-4`}>
            <Award className={`h-10 w-10 ${getScoreColor(feedback.overallScore)}`} />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Interview Complete!
          </h1>
          <p className="text-xl text-gray-600">
            Here's your detailed performance analysis
          </p>
        </div>

        {/* Overall Score */}
        <Card className="mb-8 text-center">
          <div className="mb-6">
            <div className={`text-6xl font-bold ${getScoreColor(feedback.overallScore)} mb-2`}>
              {feedback.overallScore}
            </div>
            <div className="text-2xl font-semibold text-gray-900 mb-2">
              {getPerformanceLevel(feedback.overallScore)}
            </div>
            <div className="text-gray-600">
              Overall Interview Performance
            </div>
          </div>
          
          <div className="flex justify-center space-x-4">
            <Button onClick={downloadReport} variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Download Report
            </Button>
            <Link to="/interview/setup">
              <Button>
                <RotateCcw className="h-4 w-4 mr-2" />
                Practice Again
              </Button>
            </Link>
          </div>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Performance Breakdown */}
          <Card>
            <div className="flex items-center mb-6">
              <div className="bg-blue-100 p-3 rounded-lg mr-4">
                <BarChart3 className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-gray-900">Performance Breakdown</h3>
                <p className="text-gray-600">Detailed scores by competency</p>
              </div>
            </div>

            <div className="space-y-4">
              {Object.entries(feedback.breakdown).map(([key, score]) => (
                <div key={key}>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium text-gray-700 capitalize">
                      {key === 'problemSolving' ? 'Problem Solving' : key}
                    </span>
                    <span className={`text-sm font-semibold ${getScoreColor(score)}`}>
                      {score}/100
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full ${
                        score >= 80 ? 'bg-green-500' : score >= 60 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{ width: `${score}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </Card>

          {/* Detailed Feedback */}
          <Card>
            <div className="flex items-center mb-6">
              <div className="bg-purple-100 p-3 rounded-lg mr-4">
                <MessageSquare className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-gray-900">Detailed Feedback</h3>
                <p className="text-gray-600">AI analysis of your performance</p>
              </div>
            </div>

            <div className="prose prose-sm max-w-none">
              <p className="text-gray-700 leading-relaxed">
                {feedback.feedback}
              </p>
            </div>
          </Card>
        </div>

        {/* Recommendations */}
        <Card className="mt-8">
          <div className="flex items-center mb-6">
            <div className="bg-emerald-100 p-3 rounded-lg mr-4">
              <Target className="h-6 w-6 text-emerald-600" />
            </div>
            <div>
              <h3 className="text-xl font-semibold text-gray-900">Improvement Recommendations</h3>
              <p className="text-gray-600">Actionable steps to enhance your interview skills</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {feedback.recommendations.map((recommendation, index) => (
              <div key={index} className="flex items-start p-4 bg-gray-50 rounded-lg">
                <div className="bg-emerald-100 p-2 rounded-full mr-3 flex-shrink-0">
                  <CheckCircle className="h-4 w-4 text-emerald-600" />
                </div>
                <p className="text-sm text-gray-700">{recommendation}</p>
              </div>
            ))}
          </div>
        </Card>

        {/* Interview Transcript */}
        {messages.length > 0 && (
          <Card className="mt-8">
            <div className="flex items-center mb-6">
              <div className="bg-orange-100 p-3 rounded-lg mr-4">
                <MessageSquare className="h-6 w-6 text-orange-600" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-gray-900">Interview Transcript</h3>
                <p className="text-gray-600">Review your conversation</p>
              </div>
            </div>

            <div className="max-h-96 overflow-y-auto space-y-4">
              {messages.map((message, index) => (
                <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      message.type === 'user'
                        ? 'bg-blue-100 text-blue-900'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <div className="text-xs font-medium mb-1">
                      {message.type === 'user' ? 'You' : 'AI Interviewer'}
                    </div>
                    <p className="text-sm">{message.content}</p>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        )}

        {/* Next Steps */}
        <Card className="mt-8 text-center">
          <h3 className="text-xl font-semibold text-gray-900 mb-4">What's Next?</h3>
          <p className="text-gray-600 mb-6">
            Continue improving your interview skills with more practice sessions
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link to="/interview/setup">
              <Button size="lg" className="w-full sm:w-auto">
                <RotateCcw className="h-5 w-5 mr-2" />
                Start New Interview
              </Button>
            </Link>
            <Link to="/dashboard">
              <Button variant="outline" size="lg" className="w-full sm:w-auto">
                <TrendingUp className="h-5 w-5 mr-2" />
                View Dashboard
              </Button>
            </Link>
          </div>
        </Card>
      </div>
    </div>
  );
}